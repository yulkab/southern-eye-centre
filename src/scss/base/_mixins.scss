  // ***                               ***//
 //            Media Queries             //
// ***                              *** //
$very-small: 480px;
$small: 768px;
$medium: 1024px;
$large: 1366px;
$very-large: 1620px;
$max-W: 1920px;
@mixin for-size($size) {
  @if $size == bp-mobile-only {
    @media (max-width: $very-small) { @content; }
  } @else if $size == bp-small {
    @media (min-width: #{$small - 1}) { @content; }
  } @else if $size == bp-medium {
    @media (min-width:  #{$medium - 1}) { @content; }
  } @else if $size == bp-large {
    @media (min-width:  #{$large - 1}) { @content; }
  } @else if $size == bp-xlarge {
    @media (min-width: #{$very-large - 1}) { @content; }
  } @else if $size == bp-max-W {
    @media (min-width: #{$max-W - 1}) { @content; }
  }
}

// @mixin for-size($size) {
//   @if $size == mobile-only {
//     @media (max-width: 599px) { @content; }
//   } @else if $size == tablet-portrait {
//     @media (min-width: 600px) { @content; }
//   } @else if $size == tablet-landscape {
//     @media (min-width: 900px) { @content; }
//   } @else if $size == desktop {
//     @media (min-width: 1200px) { @content; }
//   } @else if $size == big-desktop {
//     @media (min-width: 1800px) { @content; }
//   }
// }

  // ***                        ***//
 //      RETINA-READY IMAGES      //
// ***                       *** //
//usage : .image {
//    background: url("my-image.png") no-repeat;
//   @include retina-image("my-image2x.png", 1000px, 500px);
//}

@mixin retina-image($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
              background-image: url($image);
              background-size: $width $height;
          }
}

  // ***                        ***//
 //        TEXT SHORTENING        //
// ***                       *** //
//usage :  @include text-shorten();

@mixin text-shorten {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

  // ***                        ***//
 //      VERTICAL CENTERING       //
// ***                       *** //
//usage : @include vertical-center();

@mixin vertical-center {
  position: relative;
  top: 50%;
  -ms-transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%);
}


  // ***                               ***//
 //           Pixels to Rems             //
// ***                              *** //

$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  } 
  
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);
  
  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline + 0px, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline + 0rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}